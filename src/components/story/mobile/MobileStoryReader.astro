---
import type { Story } from "../../../lib/stories";

export interface Props {
  story: Story;
}

const { story } = Astro.props;
---

<div class="mobile-story-reader">
  <!-- 粘性头部 -->
  <header class="mobile-header">
    <a href="/" class="back-btn">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="m12 19-7-7 7-7"/>
        <path d="M19 12H5"/>
      </svg>
      返回
    </a>
    <div class="header-title-container">
      <h1 class="story-title" title={story.config.title}>{story.config.title}</h1>
    </div>
    <button id="autoplay-toggle" class="autoplay-btn" title="自动播放">
      <!-- 自动播放开启图标 (播放) -->
      <svg id="play-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
        <polygon points="5,3 19,12 5,21"/>
      </svg>
      <!-- 自动播放关闭图标 (暂停) -->
      <svg id="pause-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon hidden">
        <rect x="6" y="4" width="4" height="16"/>
        <rect x="14" y="4" width="4" height="16"/>
      </svg>
      <span class="autoplay-text">自动</span>
    </button>
  </header>

  <!-- 故事内容 -->
  <main class="story-content">
    {story.config.pages.map((text, index) => (
      <section class="story-page-section" id={`page-${index + 1}`}>
        <div class="page-container">
          <!-- 音频播放器 -->
          {story.audios && story.audios.pages[index] && (
            <div class="audio-player-wrapper">
              <div class="custom-audio-player">
                <button class="play-pause-btn" aria-label="播放/暂停">
                  <svg class="play-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M6 3v18l15-9L6 3z"/></svg>
                  <svg class="pause-icon hidden" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="6" y="4" width="4" height="16"></rect><rect x="14" y="4" width="4" height="16"></rect></svg>
                </button>
                <div class="progress-bar-container">
                  <div class="progress-bar-bg">
                    <div class="progress-bar"></div>
                  </div>
                </div>
                <div class="time-display">0:00 / 0:00</div>
              </div>
              <audio src={story.audios.pages[index]} preload="metadata" class="audio-player" style="display: none;"></audio>
            </div>
          )}
          
          <!-- 文本内容 -->
          <div class="text-wrapper">
            <p class="story-text">{text}</p>
          </div>

          <!-- 图片内容 -->
          <div class="image-wrapper">
            <img 
              src={story.images.pages[index]} 
              alt={`插图 ${index + 1}`} 
              loading="lazy" 
              class="story-image"
            />
          </div>
        </div>
      </section>
    ))}
  </main>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const audioPlayers = document.querySelectorAll('.audio-player') as NodeListOf<HTMLAudioElement>;
    const pageSections = document.querySelectorAll('.story-page-section') as NodeListOf<HTMLElement>;
    const autoplayToggle = document.getElementById('autoplay-toggle') as HTMLButtonElement;
    const playIcon = document.getElementById('play-icon');
    const pauseIcon = document.getElementById('pause-icon');
    const mobileHeader = document.querySelector('.mobile-header') as HTMLElement;

    let isAutoplaying = false;
    let currentPlayingIndex = -1;
    let visiblePageIndex = 0;
    let isAutoTriggeredPlay = false; // 标记是否为自动触发的播放

    function updateAutoplayButton(isPlaying: boolean) {
      if (!playIcon || !pauseIcon) return;
      if (isPlaying) {
        playIcon.classList.add('hidden');
        pauseIcon.classList.remove('hidden');
        autoplayToggle.setAttribute('title', '暂停自动播放');
      } else {
        playIcon.classList.remove('hidden');
        pauseIcon.classList.add('hidden');
        autoplayToggle.setAttribute('title', '自动播放');
      }
    }

    function stopAutoplay() {
      if (!isAutoplaying) return;
      isAutoplaying = false;
      updateAutoplayButton(false);
      if (currentPlayingIndex !== -1 && !audioPlayers[currentPlayingIndex].paused) {
        audioPlayers[currentPlayingIndex].pause();
      }
    }

    function startAutoplay(startFromIndex: number) {
      if (isAutoplaying) return;
      isAutoplaying = true;
      updateAutoplayButton(true);
      
      const alreadyPlayingIndex = Array.from(audioPlayers).findIndex(p => !p.paused);
      if (alreadyPlayingIndex !== -1) {
        currentPlayingIndex = alreadyPlayingIndex;
        scrollToPage(currentPlayingIndex);
        return;
      }

      if (startFromIndex >= 0 && startFromIndex < audioPlayers.length) {
        currentPlayingIndex = startFromIndex;
        isAutoTriggeredPlay = true; // 标记为自动触发
        audioPlayers[currentPlayingIndex].play();
      }
    }

    autoplayToggle.addEventListener('click', () => {
      if (isAutoplaying) {
        stopAutoplay();
      } else {
        startAutoplay(visiblePageIndex);
      }
    });

    function scrollToPage(index: number) {
      if (index < 0 || index >= pageSections.length) return;
      
      const textWrapper = pageSections[index].querySelector('.text-wrapper');
      if (!textWrapper) return;

      const headerHeight = mobileHeader.offsetHeight;
      // 获取当前页面的音频播放器高度
      const audioPlayerWrapper = pageSections[index].querySelector('.audio-player-wrapper') as HTMLElement;
      const audioPlayerHeight = audioPlayerWrapper ? audioPlayerWrapper.offsetHeight : 0;
      
      const elementTop = (textWrapper as HTMLElement).getBoundingClientRect().top + window.pageYOffset;
      // 考虑头部高度、播放器高度和额外边距
      const scrollToPosition = elementTop - headerHeight + audioPlayerHeight - 2;

      window.scrollTo({
        top: scrollToPosition,
        behavior: 'smooth'
      });
    }

    // --- Custom Audio Player Logic ---
    const customPlayers = document.querySelectorAll('.custom-audio-player');

    customPlayers.forEach((player, index) => {
      const audio = audioPlayers[index];
      const playPauseBtn = player.querySelector('.play-pause-btn') as HTMLButtonElement;
      const playIcon = playPauseBtn.querySelector('.play-icon');
      const pauseIcon = playPauseBtn.querySelector('.pause-icon');
      const progressBar = player.querySelector('.progress-bar') as HTMLDivElement;
      const progressBarContainer = player.querySelector('.progress-bar-container') as HTMLDivElement;
      const timeDisplay = player.querySelector('.time-display') as HTMLDivElement;

      function formatTime(seconds: number) {
        const minutes = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${minutes}:${secs.toString().padStart(2, '0')}`;
      }

      function updateProgress() {
        const percent = (audio.currentTime / audio.duration) * 100;
        progressBar.style.width = `${percent}%`;
        timeDisplay.textContent = `${formatTime(audio.currentTime)} / ${formatTime(audio.duration)}`;
      }

      function setProgress(e: MouseEvent) {
        const width = progressBarContainer.clientWidth;
        const clickX = e.offsetX;
        audio.currentTime = (clickX / width) * audio.duration;
      }

      playPauseBtn.addEventListener('click', () => {
        if (audio.paused) {
          isAutoTriggeredPlay = false; // 用户手动播放，不是自动触发
          audio.play();
        } else {
          audio.pause();
        }
      });

      audio.addEventListener('play', () => {
        playIcon?.classList.add('hidden');
        pauseIcon?.classList.remove('hidden');
        
        // 如果是自动触发的播放，重置进度条
        if (isAutoTriggeredPlay) {
          audio.currentTime = 0;
          isAutoTriggeredPlay = false; // 重置标记
        }
      });

      audio.addEventListener('pause', () => {
        playIcon?.classList.remove('hidden');
        pauseIcon?.classList.add('hidden');
      });

      audio.addEventListener('timeupdate', updateProgress);

      audio.addEventListener('loadedmetadata', () => {
        timeDisplay.textContent = `0:00 / ${formatTime(audio.duration)}`;
      });

      progressBarContainer.addEventListener('click', setProgress);
    });


    audioPlayers.forEach((player, index) => {
      player.addEventListener('play', () => {
        audioPlayers.forEach((otherPlayer, otherIndex) => {
          if (otherPlayer !== player && !otherPlayer.paused) {
            otherPlayer.pause();
          }
        });
        currentPlayingIndex = index;
        scrollToPage(index);
      });

      player.addEventListener('pause', () => {
        if (isAutoplaying && currentPlayingIndex === index && !player.ended) {
          setTimeout(() => {
            const isAnyAudioPlaying = Array.from(audioPlayers).some(p => !p.paused);
            if (isAutoplaying && !isAnyAudioPlaying) {
              stopAutoplay();
            }
          }, 50);
        }
      });

      player.addEventListener('ended', () => {
        if (isAutoplaying) {
          const nextIndex = index + 1;
          if (nextIndex < audioPlayers.length) {
            currentPlayingIndex = nextIndex;
            isAutoTriggeredPlay = true; // 标记连续播放的下一首为自动触发
            audioPlayers[nextIndex].play();
          } else {
            stopAutoplay();
          }
        }
      });
    });

    const observerOptions = {
      root: null,
      rootMargin: `-${mobileHeader.offsetHeight}px 0px -40% 0px`,
      threshold: 0.1
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const id = entry.target.id;
          if (id) {
            visiblePageIndex = parseInt(id.split('-')[1]) - 1;
          }
        }
      });
    }, observerOptions);

    pageSections.forEach(section => {
      observer.observe(section);
    });
  });
</script>

<style>
  .mobile-story-reader {
    background-color: #fdf2f8;
    color: #374151;
    overflow-x: hidden;
    width: 100%;
  }

  /* 头部 */
  .mobile-header {
    position: sticky;
    top: 0;
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem 1rem;
    background: rgba(255, 255, 255, 0.85);
    backdrop-filter: blur(8px);
    border-bottom: 1px solid rgba(236, 72, 153, 0.2);
  }

  .back-btn {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    color: #a855f7;
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 500;
  }

  .header-title-container {
    flex-grow: 1;
    text-align: center;
    /* Ensure the title container is centered by placing it in the middle */
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    width: 60%; /* Adjust width to prevent overlap */
  }

  .story-title {
    font-size: 1.1rem;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin: 0;
  }

  .autoplay-btn {
    background: rgba(168, 85, 247, 0.1);
    border: 1px solid rgba(168, 85, 247, 0.2);
    border-radius: 16px;
    cursor: pointer;
    padding: 4px 8px;
    color: #a855f7;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.75rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .autoplay-btn:hover {
    background: rgba(168, 85, 247, 0.15);
    border-color: rgba(168, 85, 247, 0.3);
  }

  .autoplay-btn:focus, .autoplay-btn:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px rgba(168, 85, 247, 0.2);
  }

  .autoplay-btn .icon.hidden {
    display: none;
  }

  .autoplay-text {
    display: inline; /* Show text for better clarity */
  }

  /* 内容区域 */
  .story-content {
    padding: 1rem 0;
  }

  .story-page-section {
    margin-bottom: 1rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid rgba(236, 72, 153, 0.15);
  }

  .story-page-section:last-of-type {
    border-bottom: none;
    padding-bottom: 0;
    margin-bottom: 0;
  }

  .page-container {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.85), rgba(255, 255, 255, 0.95));
    backdrop-filter: blur(12px);
    margin: 0 0.5rem;
    border-radius: 20px;
    box-shadow: 
      0 8px 32px rgba(0, 0, 0, 0.08), 
      0 4px 16px rgba(236, 72, 153, 0.06),
      inset 0 1px 0 rgba(255, 255, 255, 0.6);
    border: 1px solid rgba(236, 72, 153, 0.12);
    overflow: hidden;
    position: relative;
  }

  /* 页面容器的装饰性背景 */
  .page-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      radial-gradient(circle at 10% 20%, rgba(251, 207, 232, 0.15) 0%, transparent 40%),
      radial-gradient(circle at 90% 80%, rgba(196, 181, 253, 0.12) 0%, transparent 40%);
    pointer-events: none;
    z-index: 0;
  }

  /* 确保内容在背景之上 */
  .audio-player-wrapper,
  .text-wrapper,
  .image-wrapper {
    position: relative;
    z-index: 1;
  }

  /* 音频播放器 */
  .audio-player-wrapper {
    padding: 1rem 1rem 0.5rem;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.6), rgba(248, 250, 252, 0.8));
    border-bottom: 1px solid rgba(236, 72, 153, 0.08);
    backdrop-filter: blur(4px);
  }

  .audio-player {
    width: 100%;
    height: 40px;
    border-radius: 12px;
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(8px);
  }

  /* 自定义播放器样式 */
  .custom-audio-player {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    width: 100%;
    padding: 0.25rem 0.5rem;
  }

  .play-pause-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.25rem;
    color: #a855f7;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .play-pause-btn:focus, .play-pause-btn:focus-visible {
    outline: none;
    box-shadow: none;
  }

  .play-pause-btn .hidden {
    display: none;
  }

  .progress-bar-container {
    flex-grow: 1;
    height: 10px;
    background-color: rgba(168, 85, 247, 0.15);
    border-radius: 5px;
    cursor: pointer;
    display: flex;
    align-items: center;
  }

  .progress-bar-bg {
    width: 100%;
    height: 4px;
    background-color: rgba(168, 85, 247, 0.25);
    border-radius: 2px;
    margin: 0 2px;
  }

  .progress-bar {
    height: 100%;
    width: 0;
    background-color: #a855f7;
    border-radius: 2px;
  }

  .time-display {
    font-size: 0.75rem;
    color: #581c87;
    min-width: 70px;
    text-align: center;
  }
  
  /* 文本 */
  .text-wrapper {
    padding: 0.5rem 0.75rem;
    position: relative;
  }

  .story-text {
    font-size: 1rem;
    line-height: 1.7;
    text-align: justify;
    text-indent: 2em;
    padding: 1rem 1.25rem;
    margin: 0;
  }

  /* 图片 */
  .image-wrapper {
    width: 100%;
    line-height: 0; /* 移除图片下方的空隙 */
  }

  .story-image {
    width: 100%;
    height: auto;
    object-fit: cover;
  }
</style>
